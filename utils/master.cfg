# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

import os.path
import glob
import re
from masterlocal import *

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a username and password.  The same username and
# password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("local-slave", slave_pw)]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 'tcp:9989:interface=127.0.0.1'

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource

push_source = PBChangeSource(
        user = 'change', passwd = change_pw)
c['change_source'] = [push_source]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

includes_re = re.compile('^(khronos_headers|waf-tools)/')

def mlsgpu_fileIsImportant(change):
    for f in change.files:
        if includes_re.match(f) or f.startswith(mlsgpu_dir):
            return True
    return False

from buildbot.schedulers.basic import Scheduler, Dependent
from buildbot.schedulers.timed import Nightly

s_quick = Scheduler(
        name = 'quick_build',
        branch = 'master',
        treeStableTimer = 20,
        fileIsImportant = mlsgpu_fileIsImportant,
        builderNames = ['quick_debug', 'quick_optimized', 'quick_release', 'doxygen'])
s_nightly = Nightly(
        name = 'nightly',
        branch = 'master',
        builderNames = ['nightly_optimized', 'nightly_coverage'],
        hour = 0)
s_nightly_benchmark = Dependent(
        name = 'nightly_benchmark',
        upstream = s_nightly,
        builderNames = ['benchmark'])

c['schedulers'] = [s_quick, s_nightly, s_nightly_benchmark]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand, Configure, Compile, Test, SetProperty
from buildbot.steps.transfer import StringDownload, DirectoryUpload
from buildbot.process.properties import WithProperties
from buildbot import locks

# Lock that allows heavy-weight or time-sensitive processes to lock out all others
heavy_lock = locks.SlaveLock('slave_heavy', maxCount = 100)

checkout_steps = [
    Git(
        repourl = git_url,
        branch = 'master',
        mode = 'clobber',
        timeout = 120)
]

workdir = os.path.join('build', mlsgpu_dir)
build_steps = [
    Configure(
        command = [
            './waf', 'distclean', 'configure', '--lto',
            WithProperties('--variant=%(variant)s')],
        workdir = workdir),
    Compile(
        command = ['./waf', '--notests'],
        workdir = workdir),
    StringDownload(
        s = 'disk=/dev/null,4096,memory\n',
        slavedest = os.path.join(mlsgpu_dir, 'build', '.stxxl'))
]

test_steps = [
    Test(
        command = ['./testmain', WithProperties('--test=%(testsuite)s'), '-v'],
        workdir = os.path.join(workdir, 'build'))
]

coverage_steps = [
    ShellCommand(
        description = ['gathering', 'coverage'],
        descriptionDone = ['gather', 'coverage'],
        command = ['utils/mkcoverage.sh'],
        workdir = workdir,
        haltOnFailure = True),
    DirectoryUpload(
        slavesrc = os.path.join(mlsgpu_dir, 'build', 'coverage'),
        masterdest = 'public_html/coverage')
]

doxygen_steps = [
    ShellCommand(
        description = ['creating', 'builddir'],
        descriptionDone = ['create', 'builddir'],
        command = ['mkdir', '-p', 'build/doc'],
        workdir = workdir),
    Compile(
        command = ['doxygen'],
        workdir = workdir),
    DirectoryUpload(
        slavesrc = os.path.join(mlsgpu_dir, 'build', 'doc'),
        masterdest = 'public_html/doc/mlsgpu')
]

# Note: this currently only works with the slave and master sharing a
# filesystem, because the glob is done on the master.
# TODO: songo1 will require disk-backed STXXL
benchmark_steps = [
    SetProperty(
        name = 'stxxl_file',
        command = 'mktemp --tmpdir="$PWD/build"',
        property = 'stxxl_file',
        workdir = workdir),
    SetProperty(
        name = 'stxxl_config',
        command = 'mktemp --tmpdir="$PWD/build"',
        property = 'stxxl_config',
        workdir = workdir),
    StringDownload(
        s = WithProperties("disk=%(stxxl_file)s,0,syscall\n"),
        slavedest = WithProperties('%(stxxl_config)s')),
    ShellCommand(
        name = 'benchmark',
        description = ['benchmarking'],
        descriptionDone = ['benchmark'],
        command = [
            'build/mlsgpu',
            '--fit-grid=20',
            '--fit-smooth=5',
            '--levels=7',
            '--subsampling=2',
            '--max-device-splats=3000000',
            '--max-host-splats=25000000',
            '--max-split=2097152',
            '--mesh=stxxl',
            '--writer=stream',
            '--statistics',
            '--statistics-file=build/statistics.txt',
            '--output-file=build/songo1.out.ply'
            ] + glob.glob(songo1_inputs),
        workdir = workdir,
        env = {'STXXLCFG': WithProperties('%(stxxl_config)s')},
        logfiles = {'statistics': 'build/statistics.txt'},
        haltOnFailure = True,
        timeout = 3600,         # Time between writing output, not total time
        maxTime = 12 * 3600),   # Total time
    ShellCommand(
        name = 'header',
        description = ['extracting', 'header'],
        descriptionDone = ['extract', 'header'],
        command = ['../../tools/plyheader', 'build/songo1.out.ply'],
        workdir = workdir),
    ShellCommand(
        name = 'clean',
        description = ['cleaning'],
        descriptionDone = ['clean'],
        command = [
            'rm', '-f', '--',
            WithProperties('%(stxxl_config)s'),
            WithProperties('%(stxxl_file)s')
        ],
        alwaysRun = True)
]

f_build = BuildFactory()
f_build.addSteps(checkout_steps)
f_build.addSteps(build_steps)

f_build_and_test = BuildFactory()
f_build_and_test.addSteps(checkout_steps)
f_build_and_test.addSteps(build_steps)
f_build_and_test.addSteps(test_steps)

f_build_and_coverage = BuildFactory()
f_build_and_coverage.addSteps(checkout_steps)
f_build_and_coverage.addSteps(build_steps)
f_build_and_coverage.addSteps(coverage_steps)

f_doxygen = BuildFactory()
f_doxygen.addSteps(checkout_steps)
f_doxygen.addSteps(doxygen_steps)

f_benchmark = BuildFactory()
f_benchmark.addSteps(checkout_steps)
f_benchmark.addSteps(build_steps)
f_benchmark.addSteps(benchmark_steps)

from buildbot.config import BuilderConfig

slaves = ['local-slave']

b_quick_debug = BuilderConfig(
    name = 'quick_debug', slavenames = slaves, factory = f_build_and_test,
    locks = [heavy_lock.access('counting')],
    properties = {
        'variant': 'debug',
        'testsuite': 'commit',
    })
b_quick_optimized = BuilderConfig(
    name = 'quick_optimized', slavenames = slaves, factory = f_build_and_test,
    locks = [heavy_lock.access('counting')],
    properties = {
        'variant': 'optimized',
        'testsuite': 'commit',
    })
b_quick_release = BuilderConfig(
    name = 'quick_release', slavenames = slaves, factory = f_build,
    locks = [heavy_lock.access('counting')],
    properties = {
        'variant': 'release',
    })
b_nightly_optimized = BuilderConfig(
    name = 'nightly_optimized', slavenames = slaves, factory = f_build_and_test,
    locks = [heavy_lock.access('counting')],
    properties = {
        'variant': 'optimized',
        'testsuite': 'nightly'
    })
b_nightly_coverage = BuilderConfig(
    name = 'nightly_coverage', slavenames = slaves, factory = f_build_and_coverage,
    locks = [heavy_lock.access('counting')],
    properties = {'variant': 'coverage'})

b_doxygen = BuilderConfig(
    name = 'doxygen', slavenames = slaves, factory = f_doxygen,
    locks = [heavy_lock.access('counting')])

b_benchmark = BuilderConfig(
    name = 'benchmark', slavenames = slaves, factory = f_benchmark,
    locks = [heavy_lock.access('exclusive')],
    properties = {'variant': 'release'})

c['builders'] = [
    b_quick_debug, b_quick_optimized, b_quick_release,
    b_nightly_optimized, b_nightly_coverage, b_benchmark,
    b_doxygen]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html, mail
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port='tcp:8010:interface=127.0.0.1', authz=authz_cfg))
c['status'].append(mail.MailNotifier(
    mode = 'warnings',
    **mail_config))

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "mlsgpu"
c['projectURL'] = "#"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

